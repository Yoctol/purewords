[1mdiff --git a/purewords/filters/pattern_replace_filter.py b/purewords/filters/pattern_replace_filter.py[m
[1mindex ea427b6..88d0e4c 100644[m
[1m--- a/purewords/filters/pattern_replace_filter.py[m
[1m+++ b/purewords/filters/pattern_replace_filter.py[m
[36m@@ -1,8 +1,8 @@[m
 '''Pattern replace base filter'''[m
 import re[m
[31m-[m
 from .base_filter import BaseFilter[m
 [m
[32m+[m
 class PatternReplaceFilter(BaseFilter):[m
 [m
     def __init__(self, patterns=[], replacement=''):[m
[36m@@ -12,9 +12,65 @@[m [mclass PatternReplaceFilter(BaseFilter):[m
     def add_pattern(self, pattern):[m
         self.patterns.append(pattern)[m
 [m
[31m-    def __call__(self, sentence):[m
[32m+[m[32m    @staticmethod[m
[32m+[m[32m    def show_process(from_item, to_item, verbose):[m
[32m+[m[32m        if verbose:[m
[32m+[m[32m            print('Replace from {} to {}'.format(from_item, to_item))[m
[32m+[m
[32m+[m[32m    def store_matches_of_pattern(self, sentence, verbose):[m
[32m+[m[32m        self.matches = re.findall('|'.join(self.patterns), sentence)[m
[32m+[m[32m        if verbose:[m
[32m+[m[32m            print('All matches are: {}'.format(self.matches))[m
[32m+[m
[32m+[m[32m    def do_replacement(self, sentence):[m
         return re.sub([m
             '|'.join(self.patterns),[m
             self.replacement,[m
             sentence[m
         )[m
[32m+[m
[32m+[m[32m    def go_forward(self, sentence, verbose):[m
[32m+[m[32m        self.store_matches_of_pattern(sentence, verbose)[m
[32m+[m[32m        output_sentence = self.do_replacement(sentence)[m
[32m+[m[32m        show_process(sentence, output_sentence, verbose)[m
[32m+[m[32m        self.forward = True[m
[32m+[m[32m        return output_sentence[m
[32m+[m
[32m+[m[32m    def go_backward(self, sentence, verbose):[m
[32m+[m[32m        if self.forward is not True:[m
[32m+[m[32m            raise PermissionError([m
[32m+[m[32m                'You should run go_forward before running go_backward.')[m
[32m+[m
[32m+[m[32m        if isinstance(sentence, str):[m
[32m+[m[32m            sentence_copy = sentence[m
[32m+[m[32m            shift = 0[m
[32m+[m[32m            for match in self.matches:[m
[32m+[m[32m                m = re.search(self.replacement, sentence_copy)[m
[32m+[m[32m                if m is not None:[m
[32m+[m[32m                    show_process([m
[32m+[m[32m                        sentence[m.start(0) + shift: m.end(0) + shift],[m
[32m+[m[32m                        match, verbose)[m
[32m+[m[32m                    sentence[m.start(0) + shift: m.end(0) + shift] = match[m
[32m+[m[32m                    sentence_copy = sentence_copy[m.end(0):][m
[32m+[m[32m                    shift += m.end(0)[m
[32m+[m[32m                else:[m
[32m+[m[32m                    raise ValueError('{} not Found in this sentence {}'.format([m
[32m+[m[32m                        self.replacement, sentence))[m
[32m+[m[32m        elif isinstance(sentence, list):[m
[32m+[m[32m            matches_copy = self.matches[m
[32m+[m[32m            for idx, token in enumerate(sentence):[m
[32m+[m[32m                if token == self.replacement:[m
[32m+[m[32m                    show_process(sentence[idx], matches_copy[0], verbose)[m
[32m+[m[32m                    sentence[idx] = matches_copy[0][m
[32m+[m[32m                    matches_copy = matches_copy[1:][m
[32m+[m[32m        return sentence[m
[32m+[m
[32m+[m[32m    def __call__(self, sentence, invertible, mode='forward', verbose=True):[m
[32m+[m[32m        if invertible is True:[m
[32m+[m[32m            if mode == 'forward':[m
[32m+[m[32m                return self.go_forward(sentence, verbose)[m
[32m+[m[32m            elif mode == 'backward':[m
[32m+[m[32m                return self.go_backward(sentence, verbose)[m
[32m+[m
[32m+[m[32m        elif invertible is False:[m
[32m+[m[32m            return self.do_replacement(sentence)[m
